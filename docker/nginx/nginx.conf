# upstream backend {
#     server server-1:8080;
#     server server-2:8080;
# }

# server {
#     error_log /var/log/nginx/error.log debug;
#     access_log /var/log/nginx/access.log;

#     listen 80;
#     listen [::]:80;
#     location / {
#         proxy_pass http://backend/;
#         proxy_http_version 1.1;
#         proxy_set_header Upgrade $http_upgrade;
#         proxy_set_header Connection keep-alive;
#         proxy_set_header Host $host;
#         proxy_cache_bypass $http_upgrade;
#         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         proxy_set_header X-Forwarded-Proto $scheme;
#         proxy_read_timeout 1200s;
#     }
# }
user nginx;

worker_processes    auto;

events { 
    worker_connections 1024; 
}

http {
    include             /etc/nginx/proxy.conf;
    include             /etc/nginx/mime.types;
    limit_req_zone      $binary_remote_addr zone=one:10m rate=15r/s;
    server_tokens       off;
    sendfile            on;
    keepalive_timeout   29; # Adjust to the lowest possible value that makes sense for your use case.
    client_body_timeout 10; client_header_timeout 10; send_timeout 10;

    upstream webapi {
        # ip_hash; # == hash $remote_addr;
        # hash $cookie_route;
        hash $cookie_reqq consistent;
        # hash $http_upgrade$request_uri consistent;
        server          api:5000;
    }

    server {
        listen          80;
        server_name     $hostname;

        location / {
            proxy_pass  http://webapi;
            limit_req   zone=one burst=10 nodelay;
        }

        location /calculationProgressHub {
            proxy_pass http://webapi;

            proxy_http_version 1.1;
            proxy_set_header   Upgrade $http_upgrade;
            proxy_set_header   Connection "Upgrade";
            proxy_set_header   Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Proto $scheme;
        }
    }
}